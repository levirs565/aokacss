.button {
  @apply outline-none;

  &::after {
    @apply overlay w-full h-full;
  }

  &:hover::after {
    @apply overlay-hover;
  }

  &:active::after {
    @apply overlay-press;
  }

  &:focus {
    @apply outline-none;

    &::after {
      @apply overlay-focus;
    }
  }

  &:disabled::after {
    @apply bg-transparent !important;
  }

  &.type-raised,
  &.type-unelevated,
  &.type-outlined,
  &.type-text {
    @apply h-36 min-w-64 my-8;
    @apply inline-flex flex-row justify-center items-center relative;
    @apply rounded-4;
    @apply font-roboto font-medium uppercase text-sm;
  }

  &.type-raised,
  &.type-unelevated,
  &.type-outlined {
    @apply px-16;

    & > .icon {
      margin-left: -0.25rem;
    }
  }

  &.type-raised,
  &.type-unelevated {
    background-color: color(primary);
    color: color(in-primary);

    &:disabled {
      background-color: color(in-surface-low) !important;
      color: color(in-surface-low) !important;
    }

    &::after {
      @apply overlay-in-primary;
    }
  }

  &.type-raised:enabled {
    @apply elevation-2;

    &:hover {
      @apply elevation-4;
    }

    &:active {
      @apply elevation-8;
    }
  }

  &.type-text,
  &.type-outlined {
    @apply bg-transparent;
    color: color(primary);

    &:disabled {
      color: color(in-surface-low) !important;
    }

    &::after {
      @apply overlay-primary;
    }
  }

  &.type-text {
    @apply px-8;
  }

  &.type-outlined {
    @apply border border-solid;
    border-color: color(primary);

    &:disabled {
      border-color: color(in-surface-low) !important;
    }
  }

  & > .icon {
    @apply text-lg;
  }

  & > .icon + span {
    @apply ml-8;
  }

  &.type-icon {
    @apply p-12 relative w-48 h-48;
    line-height: 1;
    color: color(in-surface);

    &:disabled {
      color: color(in-surface-medium);
    }

    &::after {
      @apply overlay-in-surface rounded-full;
    }

    & > .icon {
      @apply text-2xl;
    }

    &.theme-primary {
      color: color(in-primary);

      &:disabled {
        color: color(in-primary-medium);
      }

      &::after {
        @apply overlay-in-primary;
      }
    }
  }

  $themes: config(color-themes);
  @if $themes == null {
  } @else {
    @each $theme in $themes {
      &.type-raised.theme-$(theme),
      &.type-unelevated.theme-$(theme) {
        background-color: color($(theme));
        color: color(in-$(theme));

        &::after {
          @apply overlay-in-$(theme);
        }
      }

      &.type-text.theme-$(theme),
      &.type-outlined.theme-$(theme) {
        color: color($(theme));

        &::after {
          @apply overlay-$(theme);
        }
      }

      &.type-outlined.theme-$(theme) {
        border-color: color($(theme));
      }
    }
  }
}
